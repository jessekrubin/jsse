export declare const __version__ = "0.2.0";
export declare function sleep(ms: number): Promise<unknown>;
export declare const sort_keys_replacer: (_key: any, value: any) => any;
export declare const dumps: (data: any, opts?: {
    sort_keys?: boolean;
    indent?: number | undefined;
}) => string;
export declare const keep_keys: (obj: Record<any, any>, keys: string[]) => Record<any, any>;
export declare const keep_vals: (obj: Record<any, any>, vals: any[]) => Record<string, any>;
export declare const filter_keys: (obj: Record<any, any>, keys: string[]) => Record<string, any>;
export declare const filter_vals: (obj: Record<any, any>, vals: any[]) => Record<string, any>;
export declare const filter_falsey_vals: (obj: Record<any, any>) => Record<any, any>;
export declare const zip: (arr: any[], ...arrs: any[]) => any[];
export declare const objectify: (arr: any[], key: string | number) => any;
export declare function arange(start: number, end?: number | undefined, step?: number): number[];
export declare const items: (obj: any) => [string, unknown][];
export declare function arrmin<T>(arr: T[]): T;
export declare function arrmax<T>(arr: T[]): T;
export declare function chunk<T>(array: T[], size: number): T[][];
export declare function map_async<T, U>(array: T[], cb: (value: T, index: number, array: T[]) => Promise<U>): Promise<U[]>;
export declare function filter_async<T>(array: T[], cb: (value: T, index: number, array: T[]) => Promise<boolean>): Promise<T[]>;
export declare function objkeys<O extends object>(obj: O): Array<keyof O>;
export declare function jsoncp<T>(data: T): T;
export declare function unique<T>(array: T[]): T[];
export declare function usort<T>(array: T[]): T[];
export declare function pathjoin(parts: string[], sep?: string): string;
export declare function fmt_nbytes(bytes: number): string;
export declare function objtype(obj: any): string;
export declare function nbytes(obj: any): number;
export declare function objinfo(obj: any): {
    size: number;
    size_str: string;
    obj_type: string;
};
export declare const hasArrayBuffer: boolean;
export declare const haskey: (obj: any, key: string) => boolean;
export declare const isnan: (num: string | number) => boolean;
export declare const isfin: (num: string | number) => boolean;
export declare const isinf: (num: string | number) => boolean;
export declare const isint: (num: string | number) => boolean;
export declare const isfloat: (num: string | number) => boolean;
export declare const isempty: (obj: any) => boolean;
export declare function isArrayBuffer(obj: any): boolean;
export declare const camel2snake: (str: string) => string;
export declare const pascal2camel: (str: string) => string;
export declare const snake2camel: (str: string) => string;
